name: CI
on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Stack
  stack:
    name: Stack / GHC ${{ matrix.ghc }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # TODO: "8.0", "8.2", "8.4", "8.6"
        ghc: ["8.8", "8.10", "9.0", "9.2", "9.4", "9.6", "9.8"]
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        id: setup-haskell
        with:
          enable-stack: true
          stack-no-global: true

      - name: General Setup
        run: |
          cp .ci/stack-${{ matrix.ghc }}.yaml stack.yaml
          # Print out some information for debugging purposes
          ghc --version
          stack --version
          cat stack.yaml

      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: ${{ steps.setup-haskell.outputs.stack-root }}/snapshots
          key:
            ${{ runner.os }}-stack-${{ matrix.ghc }}-${{
            hashFiles('prettyprinter-interp.cabal', 'stack.yaml') }}
          restore-keys: ${{ runner.os }}-stack-${{ matrix.ghc }}-

      - name: Install dependencies
        run: stack build --test --only-dependencies

      # Cache dependencies already at this point, so that we do not have to
      # rebuild them should the subsequent steps fail
      - name: Save cached dependencies
        uses: actions/cache/save@v4
        # Trying to save over an existing cache gives distracting
        # "Warning: Cache save failed." since they are immutable
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup-haskell.outputs.stack-root }}/snapshots
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: Build
        run : stack build

      - name: Test
        run : stack test

  # Cabal
  cabal:
    name: Cabal / GHC ${{ matrix.ghc }} ${{ matrix.project-variant }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ghc:
          - "8.0.2"
          - "8.2.2"
          - "8.4.4"
          - "8.6.5"
          - "8.8.4"
          - "8.10.7"
          - "9.0.2"
          - "9.2.8"
          - "9.4.8"
          - "9.6.5"
          - "9.8.2"
          - "9.10.1"
        project-variant: [""]
        include:
          - ghc: 8.0.2
            project-variant: -lower
          # - ghc: 9.10.1
          #   project-variant: -upper

      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-update: false

      - name: General Setup
        run: |
          cp .ci/cabal.project.local${{ matrix.project-variant}} \
            cabal.project.local
          # Print out some information for debugging purposes
          ghc --version
          cabal --version
          cat cabal.project.local

      - name: Setup CI
        # This generates dist-newstyle/cache/plan.json with hashes for all
        # dependencies, for cache invalidation.
        run: |
          cabal v2-update
          cabal v2-build all --enable-tests --dry-run

      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        id: cache
        env:
          key:
            ${{ runner.os }}-ghc-${{ matrix.ghc }}-cabal-${{
            steps.setup-haskell.outputs.cabal-version }}${{
            matrix.project-variant }}
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key:
            ${{ env.key }}-${{ hashFiles('cabal.project.local',
            'dist-newstyle/cache/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: Install dependencies
        run: cabal v2-build all --enable-tests --only-dependencies

      # Cache dependencies already at this point, so that we do not have to
      # rebuild them should the subsequent steps fail
      - name: Save cached dependencies
        uses: actions/cache/save@v4
        # Trying to save over an existing cache gives distracting
        # "Warning: Cache save failed." since they are immutable
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: Build
        run: cabal v2-build all --enable-tests

      - name: Test
        run: cabal v2-test --enable-tests --test-show-details=direct

  # Mechanism copied from https://github.com/clash-lang/clash-compiler/
  all:
    name: All jobs finished
    if: ${{ !cancelled() }}
    needs:
      - stack
      - cabal
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Check dependencies for failures
        run: |
          # Test all dependencies for success/failure
          set -x
          # True if at least one dependency succeeded
          success="${{ contains(needs.*.result, 'success') }}"
          # True if at least one dependency failed
          fail="${{ contains(needs.*.result, 'failure') }}"
          set +x

          # Test whether success/fail variables contain sane values
          if [[ "${success}" != "true" && "${success}" != "false" ]]; then exit 1; fi
          if [[ "${fail}"    != "true" && "${fail}"    != "false" ]]; then exit 1; fi

          # We want to fail if one or more dependencies fail. For safety, we introduce
          # a second check: if no dependencies succeeded something weird is going on.
          if [[ "${fail}" == "true" || "${success}" == "false" ]]; then
            echo "One or more dependency failed, or no dependency succeeded."
            exit 1
          fi

      # Currently, ubuntu-latest already has it installed, but keep it around in
      # case they ever change that
      #
      # - name: Install dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get -y install python3-yaml

      - name: Check that the 'all' job depends on all other jobs
        run: .ci/all_check.py
